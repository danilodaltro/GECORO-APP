// <auto-generated />
using System;
using GECORO.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GECORO.Persistence.Migrations
{
    [DbContext(typeof(GecoroContext))]
    partial class GecoroContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("GECORO.Domain.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("VendedorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("CPF");

                    b.HasIndex("VendedorId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("GECORO.Domain.Contrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NuContrato")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SaldoDevedor")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VendedorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("NuContrato");

                    b.HasIndex("ClienteId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Contratos");
                });

            modelBuilder.Entity("GECORO.Domain.Parcela", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContratoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NuParcela")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StParcela")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Valor")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.ToTable("Parcelas");
                });

            modelBuilder.Entity("GECORO.Domain.RegraVendedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParcelasPagas")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SaldoDevedor")
                        .HasColumnType("TEXT");

                    b.Property<int>("VendedorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VendedorId")
                        .IsUnique();

                    b.ToTable("RegraVendedor");
                });

            modelBuilder.Entity("GECORO.Domain.Vendedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Codigo");

                    b.ToTable("Vendedores");
                });

            modelBuilder.Entity("GECORO.Domain.Cliente", b =>
                {
                    b.HasOne("GECORO.Domain.Vendedor", "Vendedor")
                        .WithMany("Clientes")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("GECORO.Domain.Contrato", b =>
                {
                    b.HasOne("GECORO.Domain.Cliente", "Cliente")
                        .WithMany("Contratos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GECORO.Domain.Vendedor", null)
                        .WithMany("Contratos")
                        .HasForeignKey("VendedorId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("GECORO.Domain.Parcela", b =>
                {
                    b.HasOne("GECORO.Domain.Contrato", "Contrato")
                        .WithMany("Parcelas")
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contrato");
                });

            modelBuilder.Entity("GECORO.Domain.RegraVendedor", b =>
                {
                    b.HasOne("GECORO.Domain.Vendedor", "Vendedor")
                        .WithOne("RegraVendedor")
                        .HasForeignKey("GECORO.Domain.RegraVendedor", "VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("GECORO.Domain.Cliente", b =>
                {
                    b.Navigation("Contratos");
                });

            modelBuilder.Entity("GECORO.Domain.Contrato", b =>
                {
                    b.Navigation("Parcelas");
                });

            modelBuilder.Entity("GECORO.Domain.Vendedor", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Contratos");

                    b.Navigation("RegraVendedor");
                });
#pragma warning restore 612, 618
        }
    }
}
